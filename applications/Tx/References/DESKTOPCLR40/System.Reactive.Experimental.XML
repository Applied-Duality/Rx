<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Reactive.Experimental</name>
    </assembly>
    <members>
        <member name="T:System.Reactive.ExperimentalAttribute">
            <summary>
            Marks the program elements that are experimental. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:System.Reactive.Linq.QbservableEx">
            <summary>
            Provides a set of static methods for writing queries over observable sequences, allowing translation to a target query language.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.QbservableEx.Create(System.Reactive.Linq.IQbservableProvider,System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{System.IObservable{System.Object}}}})">
            <summary>
            Subscribes to each observable sequence returned by the iteratorMethod in sequence and produces a Unit value on the resulting sequence for each step of the iteration.
            </summary>
            <param name="provider">Query provider used to construct the IQbservable&lt;T&gt; data source.</param>
            <param name="iteratorMethod">Iterator method that drives the resulting observable sequence.</param>
            <returns>An observable sequence obtained by running the iterator and returning Unit values for each iteration step.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="iteratorMethod" /> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.QbservableEx.Create``1(System.Reactive.Linq.IQbservableProvider,System.Linq.Expressions.Expression{System.Func{System.IObserver{``0},System.Collections.Generic.IEnumerable{System.IObservable{System.Object}}}})">
            <summary>
            Subscribes to each observable sequence returned by the iteratorMethod in sequence and returns the observable sequence of values sent to the observer given to the iteratorMethod.
            </summary>
            <param name="provider">Query provider used to construct the IQbservable&lt;T&gt; data source.</param>
            <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
            <param name="iteratorMethod">Iterator method that produces elements in the resulting sequence by calling the given observer.</param>
            <returns>An observable sequence obtained by running the iterator and returning the elements that were sent to the observer.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="iteratorMethod" /> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.QbservableEx.Expand``1(System.Reactive.Linq.IQbservable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.IObservable{``0}}})">
            <summary>
            Expands an observable sequence by recursively invoking selector.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence and each of the recursively expanded sources obtained by running the selector function.</typeparam>
            <param name="source">Source sequence with the initial elements.</param>
            <param name="selector">Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.</param>
            <returns>An observable sequence containing all the elements produced by the recursive expansion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.QbservableEx.Expand``1(System.Reactive.Linq.IQbservable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.IObservable{``0}}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Expands an observable sequence by recursively invoking selector, using the specified scheduler to enumerate the queue of obtained sequences.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence and each of the recursively expanded sources obtained by running the selector function.</typeparam>
            <param name="source">Source sequence with the initial elements.</param>
            <param name="selector">Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.</param>
            <param name="scheduler">Scheduler on which to perform the expansion by enumerating the internal queue of obtained sequences.</param>
            <returns>An observable sequence containing all the elements produced by the recursive expansion.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> or <paramref name="scheduler" /> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.QbservableEx.ForkJoin``1(System.Reactive.Linq.IQbservableProvider,System.IObservable{``0}[])">
            <summary>
            Runs all specified observable sequences in parallel and collects their last elements.
            </summary>
            <param name="provider">Query provider used to construct the IQbservable&lt;T&gt; data source.</param>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="sources">Observable sequence to collect the last elements for.</param>
            <returns>An observable sequence with an array collecting the last elements of all the input sequences.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sources" /> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.QbservableEx.ForkJoin``1(System.Reactive.Linq.IQbservableProvider,System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
            Runs all observable sequences in the enumerable sources sequence in parallel and collect their last elements.
            </summary>
            <param name="provider">Query provider used to construct the IQbservable&lt;T&gt; data source.</param>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="sources">Observable sequence to collect the last elements for.</param>
            <returns>An observable sequence with an array collecting the last elements of all the input sequences.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sources" /> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.QbservableEx.ForkJoin``3(System.Reactive.Linq.IQbservable{``0},System.IObservable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Runs two observable sequences in parallel and combines their last elemenets.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
            <param name="first">First observable sequence.</param>
            <param name="second">Second observable sequence.</param>
            <param name="resultSelector">Result selector function to invoke with the last elements of both sequences.</param>
            <returns>An observable sequence with the result of calling the selector function with the last elements of both input sequences.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="first" /> or <paramref name="second" /> or <paramref name="resultSelector" /> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.QbservableEx.Let``2(System.Reactive.Linq.IQbservable{``0},System.Linq.Expressions.Expression{System.Func{System.IObservable{``0},System.IObservable{``1}}})">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on the source sequence, without sharing subscriptions.
            This operator allows for a fluent style of writing queries that use the same sequence multiple times.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
            <param name="source">Source sequence that will be shared in the selector function.</param>
            <param name="selector">Selector function which can use the source sequence as many times as needed, without sharing subscriptions to the source sequence.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.QbservableEx.ManySelect``2(System.Reactive.Linq.IQbservable{``0},System.Linq.Expressions.Expression{System.Func{System.IObservable{``0},``1}})">
            <summary>
            Comonadic bind operator.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.QbservableEx.ManySelect``2(System.Reactive.Linq.IQbservable{``0},System.Linq.Expressions.Expression{System.Func{System.IObservable{``0},``1}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Comonadic bind operator.
            </summary>
        </member>
        <member name="T:System.Reactive.Linq.IQueryLanguageEx">
            <summary>
            Internal interface describing the LINQ to Events query language.
            </summary>
        </member>
        <member name="T:System.Reactive.Linq.ObservableEx">
            <summary>
            Provides a set of static methods for writing in-memory queries over observable sequences.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.ObservableEx.Create``1(System.Func{System.IObserver{``0},System.Collections.Generic.IEnumerable{System.IObservable{System.Object}}})">
            <summary>
            Subscribes to each observable sequence returned by the iteratorMethod in sequence and returns the observable sequence of values sent to the observer given to the iteratorMethod.
            </summary>
            <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
            <param name="iteratorMethod">Iterator method that produces elements in the resulting sequence by calling the given observer.</param>
            <returns>An observable sequence obtained by running the iterator and returning the elements that were sent to the observer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="iteratorMethod"/> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.ObservableEx.Create(System.Func{System.Collections.Generic.IEnumerable{System.IObservable{System.Object}}})">
            <summary>
            Subscribes to each observable sequence returned by the iteratorMethod in sequence and produces a Unit value on the resulting sequence for each step of the iteration.
            </summary>
            <param name="iteratorMethod">Iterator method that drives the resulting observable sequence.</param>
            <returns>An observable sequence obtained by running the iterator and returning Unit values for each iteration step.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="iteratorMethod"/> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.ObservableEx.Expand``1(System.IObservable{``0},System.Func{``0,System.IObservable{``0}},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Expands an observable sequence by recursively invoking selector, using the specified scheduler to enumerate the queue of obtained sequences.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence and each of the recursively expanded sources obtained by running the selector function.</typeparam>
            <param name="source">Source sequence with the initial elements.</param>
            <param name="selector">Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.</param>
            <param name="scheduler">Scheduler on which to perform the expansion by enumerating the internal queue of obtained sequences.</param>
            <returns>An observable sequence containing all the elements produced by the recursive expansion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> or <paramref name="scheduler"/> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.ObservableEx.Expand``1(System.IObservable{``0},System.Func{``0,System.IObservable{``0}})">
            <summary>
            Expands an observable sequence by recursively invoking selector.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence and each of the recursively expanded sources obtained by running the selector function.</typeparam>
            <param name="source">Source sequence with the initial elements.</param>
            <param name="selector">Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.</param>
            <returns>An observable sequence containing all the elements produced by the recursive expansion.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.ObservableEx.ForkJoin``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
            <summary>
            Runs two observable sequences in parallel and combines their last elemenets.
            </summary>
            <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
            <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
            <param name="first">First observable sequence.</param>
            <param name="second">Second observable sequence.</param>
            <param name="resultSelector">Result selector function to invoke with the last elements of both sequences.</param>
            <returns>An observable sequence with the result of calling the selector function with the last elements of both input sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> or <paramref name="second"/> or <paramref name="resultSelector"/> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.ObservableEx.ForkJoin``1(System.IObservable{``0}[])">
            <summary>
            Runs all specified observable sequences in parallel and collects their last elements.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="sources">Observable sequence to collect the last elements for.</param>
            <returns>An observable sequence with an array collecting the last elements of all the input sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.ObservableEx.ForkJoin``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
            Runs all observable sequences in the enumerable sources sequence in parallel and collect their last elements.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
            <param name="sources">Observable sequence to collect the last elements for.</param>
            <returns>An observable sequence with an array collecting the last elements of all the input sequences.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.ObservableEx.Let``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on the source sequence, without sharing subscriptions.
            This operator allows for a fluent style of writing queries that use the same sequence multiple times.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
            <param name="source">Source sequence that will be shared in the selector function.</param>
            <param name="selector">Selector function which can use the source sequence as many times as needed, without sharing subscriptions to the source sequence.</param>
            <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:System.Reactive.Linq.ObservableEx.ManySelect``2(System.IObservable{``0},System.Func{System.IObservable{``0},``1},System.Reactive.Concurrency.IScheduler)">
            <summary>
            Comonadic bind operator.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.ObservableEx.ManySelect``2(System.IObservable{``0},System.Func{System.IObservable{``0},``1})">
            <summary>
            Comonadic bind operator.
            </summary>
        </member>
        <member name="M:System.Reactive.Linq.ObservableEx.ToListObservable``1(System.IObservable{``0})">
            <summary>
            Immediately subscribes to source and retains the elements in the observable sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <returns>Object that's both an observable sequence and a list which can be used to access the source sequence's elements.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="T:System.Reactive.ListObservable`1">
            <summary>
            Represents an object that retains the elements of the observable sequence and signals the end of the sequence.
            </summary>
            <typeparam name="T">The type of elements received from the source sequence.</typeparam>
        </member>
        <member name="M:System.Reactive.ListObservable`1.#ctor(System.IObservable{`0})">
            <summary>
            Constructs an object that retains the values of source and signals the end of the sequence.
            </summary>
            <param name="source">The observable sequence whose elements will be retained in the list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:System.Reactive.ListObservable`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the ListObservable.
            </summary>
            <param name="item">The element to determine the index for.</param>
            <returns>The index of the specified item in the list; -1 if not found.</returns>
        </member>
        <member name="M:System.Reactive.ListObservable`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the ListObservable at the specified index.
            </summary>
            <param name="index">The index to insert the item at.</param>
            <param name="item">The item to insert in the list.</param>
        </member>
        <member name="M:System.Reactive.ListObservable`1.RemoveAt(System.Int32)">
            <summary>
            Removes the ListObservable item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:System.Reactive.ListObservable`1.Add(`0)">
            <summary>
            Adds an item to the ListObservable.
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:System.Reactive.ListObservable`1.Clear">
            <summary>
            Removes all items from the ListObservable.
            </summary>
        </member>
        <member name="M:System.Reactive.ListObservable`1.Contains(`0)">
            <summary>
            Determines whether the ListObservable contains a specific value.
            </summary>
            <param name="item">The item to search for in the list.</param>
            <returns>true if found; false otherwise.</returns>
        </member>
        <member name="M:System.Reactive.ListObservable`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the ListObservable to an System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">The array to copy elements to.</param>
            <param name="arrayIndex">The start index in the array to start copying elements to.</param>
        </member>
        <member name="M:System.Reactive.ListObservable`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the ListObservable.
            </summary>
            <param name="item">The item to remove from the list.</param>
            <returns>true if the item was found; false otherwise.</returns>
        </member>
        <member name="M:System.Reactive.ListObservable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>Enumerator over the list.</returns>
        </member>
        <member name="M:System.Reactive.ListObservable`1.Subscribe(System.IObserver{System.Object})">
            <summary>
            Subscribes an observer to the ListObservable which will be notified upon completion.
            </summary>
            <param name="observer">The observer to send completion or error messages to.</param>
            <returns>The disposable resource that can be used to unsubscribe.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="observer"/> is null.</exception>
        </member>
        <member name="P:System.Reactive.ListObservable`1.Value">
            <summary>
            Returns the last value of the observable sequence.
            </summary>
        </member>
        <member name="P:System.Reactive.ListObservable`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index of the item to retrieve or set.</param>
        </member>
        <member name="P:System.Reactive.ListObservable`1.Count">
            <summary>
            Gets the number of elements contained in the ListObservable.
            </summary>
        </member>
        <member name="P:System.Reactive.ListObservable`1.IsReadOnly">
            <summary>
            Gets a value that indicates whether the ListObservable is read-only.
            </summary>
        </member>
    </members>
</doc>
